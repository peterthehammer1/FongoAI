"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetellClient = exports.convertFloat32ToPCM16 = exports.convertPCM16ToFloat32 = exports.LiveClient = exports.SDKConfiguration = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var components = __importStar(require("../models/components"));
var errors = __importStar(require("../models/errors"));
var operations = __importStar(require("../models/operations"));
var axios_1 = __importDefault(require("axios"));
var events_1 = require("events");
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    /**
     * The production server.
     */
    "https://api.re-tell.ai",
];
var SDKConfiguration = /** @class */ (function () {
    function SDKConfiguration(init) {
        this.language = "typescript";
        this.openapiDocVersion = "1.0.0";
        this.sdkVersion = "1.15.9";
        this.genVersion = "2.207.1";
        Object.assign(this, init);
    }
    return SDKConfiguration;
}());
exports.SDKConfiguration = SDKConfiguration;
var LiveClient = /** @class */ (function (_super) {
    __extends(LiveClient, _super);
    function LiveClient(apiKey, agentId, sampleRate, agentPromptParams, baseEndpoint) {
        var e_1, _a;
        var _this = _super.call(this) || this;
        var endpoint = baseEndpoint +
            "/create-web-call?api_key=" +
            apiKey +
            "&agent_id=" +
            agentId +
            "&sample_rate=" +
            sampleRate;
        try {
            for (var agentPromptParams_1 = __values(agentPromptParams), agentPromptParams_1_1 = agentPromptParams_1.next(); !agentPromptParams_1_1.done; agentPromptParams_1_1 = agentPromptParams_1.next()) {
                var param = agentPromptParams_1_1.value;
                endpoint += "&agent_prompt_params=" + JSON.stringify(param);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (agentPromptParams_1_1 && !agentPromptParams_1_1.done && (_a = agentPromptParams_1.return)) _a.call(agentPromptParams_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        _this.ws = new WebSocket(endpoint);
        _this.ws.binaryType = "arraybuffer";
        return _this;
    }
    LiveClient.prototype.waitForReady = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var onError = function (error) {
                reject(error); // Reject on error
            };
            _this.ws.onerror = onError;
            var onClose = function () {
                reject("websocket closed before ready.");
            };
            _this.ws.onclose = onClose;
            var onMessage = function (event) {
                try {
                    var data = JSON.parse(event.data);
                    if (data.status === "ready") {
                        // Remove all registered listeners for cleaner future processing.
                        _this.ws.removeEventListener("error", onError);
                        _this.ws.removeEventListener("close", onClose);
                        _this.ws.removeEventListener("message", onMessage);
                        // Emit audio
                        _this.ws.onmessage = function (event) {
                            var audio = event.data;
                            _this.emit("audio", new Uint8Array(audio));
                        };
                        _this.ws.onclose = function (event) {
                            _this.emit("close", event);
                        };
                        resolve(); // Resolve when the ready message is received
                    }
                }
                catch (error) {
                    // Handle JSON parsing error
                    reject("malformed ready event.");
                }
            };
            _this.ws.onmessage = onMessage;
        });
    };
    LiveClient.prototype.send = function (audio) {
        if (this.ws.readyState === 1)
            this.ws.send(audio);
    };
    LiveClient.prototype.close = function () {
        this.ws.close();
    };
    return LiveClient;
}(events_1.EventEmitter));
exports.LiveClient = LiveClient;
function convertPCM16ToFloat32(array) {
    var targetArray = new Float32Array(array.byteLength / 2);
    // A DataView is used to read our 16-bit little-endian samples out of the Uint8Array buffer
    var sourceDataView = new DataView(array.buffer);
    // Loop through, get values, and divide by 32,768
    for (var i = 0; i < targetArray.length; i++) {
        targetArray[i] = sourceDataView.getInt16(i * 2, true) / Math.pow(2, 16 - 1);
    }
    return targetArray;
}
exports.convertPCM16ToFloat32 = convertPCM16ToFloat32;
function convertFloat32ToPCM16(array) {
    var buffer = new ArrayBuffer(array.length * 2);
    var view = new DataView(buffer);
    for (var i = 0; i < array.length; i++) {
        var value = array[i] * 32768;
        view.setInt16(i * 2, value, true); // true for little-endian
    }
    return new Uint8Array(buffer);
}
exports.convertFloat32ToPCM16 = convertFloat32ToPCM16;
var RetellClient = /** @class */ (function () {
    function RetellClient(props) {
        var _a, _b;
        var serverURL = props === null || props === void 0 ? void 0 : props.serverURL;
        var serverIdx = (_a = props === null || props === void 0 ? void 0 : props.serverIdx) !== null && _a !== void 0 ? _a : 0;
        if (!serverURL) {
            serverURL = exports.ServerList[serverIdx];
        }
        var defaultClient = (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create();
        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            security: new components.Security({ apiKey: props === null || props === void 0 ? void 0 : props.apiKey }),
            serverURL: serverURL,
            retryConfig: props === null || props === void 0 ? void 0 : props.retryConfig,
        });
    }
    RetellClient.prototype.createWebCall = function (apikey, agentId, sampleRate, agentPromptParams, websocketEndpoint) {
        if (sampleRate === void 0) { sampleRate = 16000; }
        if (agentPromptParams === void 0) { agentPromptParams = []; }
        if (websocketEndpoint === void 0) { websocketEndpoint = "wss://api.re-tell.ai"; }
        return __awaiter(this, void 0, void 0, function () {
            var liveClient;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        liveClient = new LiveClient(apikey, agentId, sampleRate, agentPromptParams, websocketEndpoint);
                        return [4 /*yield*/, liveClient.waitForReady()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, liveClient];
                }
            });
        });
    };
    /**
     * Create a new agent
     */
    RetellClient.prototype.createAgent = function (req, config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var baseURL, operationUrl, _c, reqBodyHeaders, reqBody, client, globalSecurity, properties, headers, httpRes, responseContentType, res, decodedRes, err, err, err, err;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (!(req instanceof utils.SpeakeasyBase)) {
                            req = new operations.CreateAgentRequestBody(req);
                        }
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = baseURL.replace(/\/$/, "") + "/create-agent";
                        _c = __read([{}, null], 2), reqBodyHeaders = _c[0], reqBody = _c[1];
                        try {
                            _d = __read(utils.serializeRequestBody(req, "request", "json"), 2), reqBodyHeaders = _d[0], reqBody = _d[1];
                        }
                        catch (e) {
                            if (e instanceof Error) {
                                throw new Error("Error serializing request body, cause: ".concat(e.message));
                            }
                        }
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _e.sent();
                        _e.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new components.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        if (reqBody == null)
                            throw new Error("request body is required");
                        headers["Accept"] = "application/json";
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl, method: "post", headers: headers, responseType: "arraybuffer", data: reqBody }, config))];
                    case 3:
                        httpRes = _e.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.CreateAgentResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    res.agent = utils.objectToClass(JSON.parse(decodedRes), components.Agent);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.CreateAgentResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.CreateAgentResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.CreateAgentResponseResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.CreateAgentResponseResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 422:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.CreateAgentResponse422ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.CreateAgentResponse422ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.CreateAgentResponse500ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.CreateAgentResponse500ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Initiate an outbound phone call.
     */
    RetellClient.prototype.createPhoneCall = function (req, config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var baseURL, operationUrl, _c, reqBodyHeaders, reqBody, client, globalSecurity, properties, headers, httpRes, responseContentType, res, decodedRes, err, err, err, err, err, err;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (!(req instanceof utils.SpeakeasyBase)) {
                            req = new operations.CreatePhoneCallRequestBody(req);
                        }
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = baseURL.replace(/\/$/, "") + "/create-phone-call";
                        _c = __read([{}, null], 2), reqBodyHeaders = _c[0], reqBody = _c[1];
                        try {
                            _d = __read(utils.serializeRequestBody(req, "request", "json"), 2), reqBodyHeaders = _d[0], reqBody = _d[1];
                        }
                        catch (e) {
                            if (e instanceof Error) {
                                throw new Error("Error serializing request body, cause: ".concat(e.message));
                            }
                        }
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _e.sent();
                        _e.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new components.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        if (reqBody == null)
                            throw new Error("request body is required");
                        headers["Accept"] = "application/json";
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl, method: "post", headers: headers, responseType: "arraybuffer", data: reqBody }, config))];
                    case 3:
                        httpRes = _e.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.CreatePhoneCallResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    res.object = utils.objectToClass(JSON.parse(decodedRes), operations.CreatePhoneCallResponseBody);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.CreatePhoneCallResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.CreatePhoneCallResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.CreatePhoneCallResponseResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.CreatePhoneCallResponseResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 402:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.CreatePhoneCallResponse402ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.CreatePhoneCallResponse402ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 422:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.CreatePhoneCallResponse422ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.CreatePhoneCallResponse422ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 429:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.CreatePhoneCallResponse429ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.CreatePhoneCallResponse429ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.CreatePhoneCallResponse500ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.CreatePhoneCallResponse500ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Create a new phone number
     */
    RetellClient.prototype.createPhoneNumber = function (req, config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var baseURL, operationUrl, _c, reqBodyHeaders, reqBody, client, globalSecurity, properties, headers, httpRes, responseContentType, res, decodedRes, err, err, err, err, err;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (!(req instanceof utils.SpeakeasyBase)) {
                            req = new operations.CreatePhoneNumberRequestBody(req);
                        }
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = baseURL.replace(/\/$/, "") + "/create-phone-number";
                        _c = __read([{}, null], 2), reqBodyHeaders = _c[0], reqBody = _c[1];
                        try {
                            _d = __read(utils.serializeRequestBody(req, "request", "json"), 2), reqBodyHeaders = _d[0], reqBody = _d[1];
                        }
                        catch (e) {
                            if (e instanceof Error) {
                                throw new Error("Error serializing request body, cause: ".concat(e.message));
                            }
                        }
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _e.sent();
                        _e.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new components.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        if (reqBody == null)
                            throw new Error("request body is required");
                        headers["Accept"] = "application/json";
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl, method: "post", headers: headers, responseType: "arraybuffer", data: reqBody }, config))];
                    case 3:
                        httpRes = _e.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.CreatePhoneNumberResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    res.phoneNumber = utils.objectToClass(JSON.parse(decodedRes), components.PhoneNumber);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.CreatePhoneNumberResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.CreatePhoneNumberResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.CreatePhoneNumberResponseResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.CreatePhoneNumberResponseResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 402:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.CreatePhoneNumberResponse402ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.CreatePhoneNumberResponse402ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 422:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.CreatePhoneNumberResponse422ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.CreatePhoneNumberResponse422ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.CreatePhoneNumberResponse500ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.CreatePhoneNumberResponse500ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Delete an existing agent
     */
    RetellClient.prototype.deleteAgent = function (agentId, config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var req, baseURL, operationUrl, client, globalSecurity, properties, headers, httpRes, responseContentType, res, decodedRes, err, err, err, err;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        req = new operations.DeleteAgentRequest({
                            agentId: agentId,
                        });
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = utils.generateURL(baseURL, "/delete-agent/{agent_id}", req);
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _c.sent();
                        _c.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new components.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign({}, config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        headers["Accept"] = "application/json";
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl, method: "delete", headers: headers, responseType: "arraybuffer" }, config))];
                    case 3:
                        httpRes = _c.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.DeleteAgentResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.DeleteAgentResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.DeleteAgentResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.DeleteAgentResponseResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.DeleteAgentResponseResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 422:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.DeleteAgentResponse422ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.DeleteAgentResponse422ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.DeleteAgentResponse500ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.DeleteAgentResponse500ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Delete a specific phone number
     */
    RetellClient.prototype.deletePhoneNumber = function (phoneNumber, config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var req, baseURL, operationUrl, client, globalSecurity, properties, headers, httpRes, responseContentType, res, decodedRes, err, err, err, err;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        req = new operations.DeletePhoneNumberRequest({
                            phoneNumber: phoneNumber,
                        });
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = utils.generateURL(baseURL, "/delete-phone-number/{phone_number}", req);
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _c.sent();
                        _c.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new components.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign({}, config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        headers["Accept"] = "application/json";
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl, method: "delete", headers: headers, responseType: "arraybuffer" }, config))];
                    case 3:
                        httpRes = _c.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.DeletePhoneNumberResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.DeletePhoneNumberResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.DeletePhoneNumberResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.DeletePhoneNumberResponseResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.DeletePhoneNumberResponseResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 422:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.DeletePhoneNumberResponse422ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.DeletePhoneNumberResponse422ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.DeletePhoneNumberResponse500ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.DeletePhoneNumberResponse500ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Retrieve details of a specific agent
     */
    RetellClient.prototype.getAgent = function (agentId, config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var req, baseURL, operationUrl, client, globalSecurity, properties, headers, httpRes, responseContentType, res, decodedRes, err, err, err, err;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        req = new operations.GetAgentRequest({
                            agentId: agentId,
                        });
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = utils.generateURL(baseURL, "/get-agent/{agent_id}", req);
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _c.sent();
                        _c.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new components.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign({}, config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        headers["Accept"] = "application/json";
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl, method: "get", headers: headers, responseType: "arraybuffer" }, config))];
                    case 3:
                        httpRes = _c.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.GetAgentResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    res.agent = utils.objectToClass(JSON.parse(decodedRes), components.Agent);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.GetAgentResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.GetAgentResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.GetAgentResponseResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.GetAgentResponseResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 422:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.GetAgentResponse422ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.GetAgentResponse422ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.GetAgentResponse500ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.GetAgentResponse500ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Retrieve details of a specific call
     */
    RetellClient.prototype.getCall = function (callId, config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var req, baseURL, operationUrl, client, globalSecurity, properties, headers, httpRes, responseContentType, res, decodedRes, err, err, err, err;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        req = new operations.GetCallRequest({
                            callId: callId,
                        });
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = utils.generateURL(baseURL, "/get-call/{call_id}", req);
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _c.sent();
                        _c.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new components.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign({}, config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        headers["Accept"] = "application/json";
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl, method: "get", headers: headers, responseType: "arraybuffer" }, config))];
                    case 3:
                        httpRes = _c.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.GetCallResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    res.callDetail = utils.objectToClass(JSON.parse(decodedRes), components.CallDetail);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.GetCallResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.GetCallResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.GetCallResponseResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.GetCallResponseResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 422:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.GetCallResponse422ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.GetCallResponse422ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.GetCallResponse500ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.GetCallResponse500ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Retrieve info about a specific number
     */
    RetellClient.prototype.getPhoneNumber = function (phoneNumber, config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var req, baseURL, operationUrl, client, globalSecurity, properties, headers, httpRes, responseContentType, res, decodedRes, err, err, err, err;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        req = new operations.GetPhoneNumberRequest({
                            phoneNumber: phoneNumber,
                        });
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = utils.generateURL(baseURL, "/get-phone-number/{phone_number}", req);
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _c.sent();
                        _c.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new components.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign({}, config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        headers["Accept"] = "application/json";
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl, method: "get", headers: headers, responseType: "arraybuffer" }, config))];
                    case 3:
                        httpRes = _c.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.GetPhoneNumberResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    res.phoneNumber = utils.objectToClass(JSON.parse(decodedRes), components.PhoneNumber);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.GetPhoneNumberResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.GetPhoneNumberResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.GetPhoneNumberResponseResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.GetPhoneNumberResponseResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 422:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.GetPhoneNumberResponse422ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.GetPhoneNumberResponse422ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.GetPhoneNumberResponse500ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.GetPhoneNumberResponse500ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * List all agents
     */
    RetellClient.prototype.listAgents = function (config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var baseURL, operationUrl, client, globalSecurity, properties, headers, httpRes, responseContentType, res, decodedRes, resFieldDepth, err, err;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = baseURL.replace(/\/$/, "") + "/list-agents";
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _c.sent();
                        _c.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new components.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign({}, config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        headers["Accept"] = "application/json";
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl, method: "get", headers: headers, responseType: "arraybuffer" }, config))];
                    case 3:
                        httpRes = _c.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.ListAgentsResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    res.classes = [];
                                    resFieldDepth = utils.getResFieldDepth(res);
                                    res.classes = utils.objectToClass(JSON.parse(decodedRes), components.Agent, resFieldDepth);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.ListAgentsResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.ListAgentsResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.ListAgentsResponseResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.ListAgentsResponseResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Retrieve call details
     */
    RetellClient.prototype.listCalls = function (filterCriteria, limit, sortOrder, config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var req, baseURL, operationUrl, client, globalSecurity, properties, headers, queryParams, httpRes, responseContentType, res, decodedRes, resFieldDepth, err, err, err;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        req = new operations.ListCallsRequest({
                            filterCriteria: filterCriteria,
                            limit: limit,
                            sortOrder: sortOrder,
                        });
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = baseURL.replace(/\/$/, "") + "/list-calls";
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _c.sent();
                        _c.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new components.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign({}, config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        queryParams = utils.serializeQueryParams(req);
                        headers["Accept"] = "application/json";
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl + queryParams, method: "get", headers: headers, responseType: "arraybuffer" }, config))];
                    case 3:
                        httpRes = _c.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.ListCallsResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    res.classes = [];
                                    resFieldDepth = utils.getResFieldDepth(res);
                                    res.classes = utils.objectToClass(JSON.parse(decodedRes), components.CallDetail, resFieldDepth);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.ListCallsResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.ListCallsResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.ListCallsResponseResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.ListCallsResponseResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.ListCallsResponse500ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.ListCallsResponse500ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * List all purchased and active phone numbers
     */
    RetellClient.prototype.listPhoneNumbers = function (config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var baseURL, operationUrl, client, globalSecurity, properties, headers, httpRes, responseContentType, res, decodedRes, resFieldDepth, err, err, err;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = baseURL.replace(/\/$/, "") + "/list-phone-numbers";
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _c.sent();
                        _c.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new components.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign({}, config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        headers["Accept"] = "application/json";
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl, method: "get", headers: headers, responseType: "arraybuffer" }, config))];
                    case 3:
                        httpRes = _c.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.ListPhoneNumbersResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    res.classes = [];
                                    resFieldDepth = utils.getResFieldDepth(res);
                                    res.classes = utils.objectToClass(JSON.parse(decodedRes), components.PhoneNumber, resFieldDepth);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.ListPhoneNumbersResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.ListPhoneNumbersResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.ListPhoneNumbersResponseResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.ListPhoneNumbersResponseResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.ListPhoneNumbersResponse500ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.ListPhoneNumbersResponse500ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Update an existing agent
     */
    RetellClient.prototype.updateAgent = function (agentNoDefaultNoRequired, agentId, config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var req, baseURL, operationUrl, _c, reqBodyHeaders, reqBody, client, globalSecurity, properties, headers, httpRes, responseContentType, res, decodedRes, err, err, err, err;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        req = new operations.UpdateAgentRequest({
                            agentNoDefaultNoRequired: agentNoDefaultNoRequired,
                            agentId: agentId,
                        });
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = utils.generateURL(baseURL, "/update-agent/{agent_id}", req);
                        _c = __read([{}, null], 2), reqBodyHeaders = _c[0], reqBody = _c[1];
                        try {
                            _d = __read(utils.serializeRequestBody(req, "agentNoDefaultNoRequired", "json"), 2), reqBodyHeaders = _d[0], reqBody = _d[1];
                        }
                        catch (e) {
                            if (e instanceof Error) {
                                throw new Error("Error serializing request body, cause: ".concat(e.message));
                            }
                        }
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _e.sent();
                        _e.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new components.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        if (reqBody == null)
                            throw new Error("request body is required");
                        headers["Accept"] = "application/json";
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl, method: "patch", headers: headers, responseType: "arraybuffer", data: reqBody }, config))];
                    case 3:
                        httpRes = _e.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.UpdateAgentResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    res.agent = utils.objectToClass(JSON.parse(decodedRes), components.Agent);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.UpdateAgentResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.UpdateAgentResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.UpdateAgentResponseResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.UpdateAgentResponseResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 422:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.UpdateAgentResponse422ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.UpdateAgentResponse422ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.UpdateAgentResponse500ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.UpdateAgentResponse500ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Update an existing phone number
     */
    RetellClient.prototype.updatePhoneAgent = function (requestBody, phoneNumber, config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var req, baseURL, operationUrl, _c, reqBodyHeaders, reqBody, client, globalSecurity, properties, headers, httpRes, responseContentType, res, decodedRes, err, err, err, err;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        req = new operations.UpdatePhoneAgentRequest({
                            requestBody: requestBody,
                            phoneNumber: phoneNumber,
                        });
                        baseURL = utils.templateUrl(this.sdkConfiguration.serverURL, this.sdkConfiguration.serverDefaults);
                        operationUrl = utils.generateURL(baseURL, "/update-phone-agent/{phone_number}", req);
                        _c = __read([{}, null], 2), reqBodyHeaders = _c[0], reqBody = _c[1];
                        try {
                            _d = __read(utils.serializeRequestBody(req, "requestBody", "json"), 2), reqBodyHeaders = _d[0], reqBody = _d[1];
                        }
                        catch (e) {
                            if (e instanceof Error) {
                                throw new Error("Error serializing request body, cause: ".concat(e.message));
                            }
                        }
                        client = this.sdkConfiguration.defaultClient;
                        globalSecurity = this.sdkConfiguration.security;
                        if (!(typeof globalSecurity === "function")) return [3 /*break*/, 2];
                        return [4 /*yield*/, globalSecurity()];
                    case 1:
                        globalSecurity = _e.sent();
                        _e.label = 2;
                    case 2:
                        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
                            globalSecurity = new components.Security(globalSecurity);
                        }
                        properties = utils.parseSecurityProperties(globalSecurity);
                        headers = __assign(__assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers), properties.headers);
                        if (reqBody == null)
                            throw new Error("request body is required");
                        headers["Accept"] = "application/json";
                        return [4 /*yield*/, client.request(__assign({ validateStatus: function () { return true; }, url: operationUrl, method: "patch", headers: headers, responseType: "arraybuffer", data: reqBody }, config))];
                    case 3:
                        httpRes = _e.sent();
                        responseContentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
                        if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null) {
                            throw new Error("status code not found in response: ".concat(httpRes));
                        }
                        res = new operations.UpdatePhoneAgentResponse({
                            statusCode: httpRes.status,
                            contentType: responseContentType,
                            rawResponse: httpRes,
                        });
                        decodedRes = new TextDecoder().decode(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                        switch (true) {
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    res.phoneNumber = utils.objectToClass(JSON.parse(decodedRes), components.PhoneNumber);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.UpdatePhoneAgentResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.UpdatePhoneAgentResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.UpdatePhoneAgentResponseResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.UpdatePhoneAgentResponseResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 422:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.UpdatePhoneAgentResponse422ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.UpdatePhoneAgentResponse422ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                            case ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 400 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 500) ||
                                ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) >= 500 && (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) < 600):
                                throw new errors.SDKError("API error occurred", httpRes.status, decodedRes, httpRes);
                            case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                                if (utils.matchContentType(responseContentType, "application/json")) {
                                    err = utils.objectToClass(JSON.parse(decodedRes), errors.UpdatePhoneAgentResponse500ResponseBody);
                                    err.rawResponse = httpRes;
                                    throw new errors.UpdatePhoneAgentResponse500ResponseBody(err);
                                }
                                else {
                                    throw new errors.SDKError("unknown content-type received: " + responseContentType, httpRes.status, decodedRes, httpRes);
                                }
                                break;
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    return RetellClient;
}());
exports.RetellClient = RetellClient;
